:root {
    --primary: #0037ff;
    --secondary: #6B7280;
    --surface: #FFFFFF;
    --text: #1F2937;
    --text-secondary: #6B7280;
}


[data-theme="dark"] {
    --surface: #1F2937;
    --text: #F9FAFB;
    --text-secondary: #9CA3AF;
}

body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    margin: 0;
    background-color: var(--background);
    color: var(--text);
}

.container {
    text-align: center;
    background-color: var(--surface);
    padding: 3rem;
    border-radius: 24px;
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.05);
    width: 90%;
    max-width: 400px;
}

h1 {
    font-size: 1.8rem;
    font-weight: 700;
    margin-bottom: 2rem;
    color: var(--text);
}

.timer {
    font-size: 5rem;
    font-weight: 700;
    margin: 2rem 0;
    color: var(--primary);
    font-feature-settings: "tnum";
    font-variant-numeric: tabular-nums;
}

.controls {
    display: flex;
    gap: 2rem;
    justify-content: center;
    margin: 1.5rem 0;
}

.controls button {
    width: 56px;
    height: 56px;
    cursor: pointer;
    background-color: var(--primary);
    color: white;
    border: none;
    border-radius: 12px;
    font-weight: 600;
    transition: all 0.2s ease;
}

.controls button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(108, 99, 255, 0.2);
}

.controls button:active {
    transform: translateY(0);
}

#mode-toggle {
    font-size: 1rem;
    padding: 0.8rem 1.5rem;
    cursor: pointer;
    border: none;
    border-radius: 12px;
    font-weight: 600;
    transition: all 0.2s ease;
}

.mode-toggle button.work-mode {
    background-color: var(--primary);
    color: white;
}

.mode-toggle button.break-mode {
    background-color: var(--secondary);
    color: white;
}

.mode-toggle button:hover {
    transform: translateY(-2px);
    filter: brightness(1.1);
}

#mode-text {
    font-size: 1rem;
    margin-top: 1rem;
    color: var(--text-secondary);
    font-weight: 500;
}

/* Add animation for mode switching */
.timer, #mode-text, #mode-toggle {
    transition: all 0.3s ease;
}

/* Specific button states */
#pause {
    background-color: var(--text-secondary);
}

#reset {
    background-color: var(--text-secondary);
}

.app-container {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    width: 100%;
    background-color: var(--background);
    transition: all 0.3s ease;
}

.main-container {
    padding-top: 4rem;
    min-height: calc(100vh - 4rem);
    display: flex;
    justify-content: center;
    align-items: center;
}

.timer-section {
    background-color: var(--surface);
    padding: 3rem;
    border-radius: 24px;
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.05);
    width: 100%;
    max-width: 500px;
    text-align: center;
}

.task-section {
    width: 300px;
    background-color: var(--surface);
    padding: 2rem;
    border-radius: 24px;
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.05);
}

.timer-controls {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1.5rem;
    margin: 2rem 0;
}

.controls button, 
#theme-toggle-btn, 
#increase-time, 
#decrease-time {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    border: none;
    background-color: var(--primary);
    color: white;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
}

.controls button:hover,
#theme-toggle-btn:hover,
#increase-time:hover,
#decrease-time:hover {
    transform: translateY(-2px);
    filter: brightness(1.1);
}

.controls button i,
#theme-toggle-btn i,
#increase-time i,
#decrease-time i {
    font-size: 1.4rem;
    line-height: 1;
    width: auto;
    height: auto;
}

.break-icon {
    display: none;
}

.break-mode .work-icon {
    display: none;
}

.break-mode .break-icon {
    display: inline;
}

.task-input {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
}

.task-input textarea {
    flex: 1;
    padding: 0.8rem;
    border: 1px solid var(--text-secondary);
    border-radius: 8px;
    background-color: var(--surface);
    color: var(--text);
}

.task-history {
    max-height: 400px;
    overflow-y: auto;
}

.quote {
    margin-top: 2rem;
    color: var(--text-secondary);
    font-style: italic;
}

/* Add these styles to your existing CSS */
.task-item {
    background-color: var(--surface);
    border: 1px solid var(--text-secondary);
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
}

.task-item p {
    margin: 0 0 0.5rem 0;
    color: var(--text);
}

.task-item small {
    color: var(--text-secondary);
}

button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

#task-list {
    margin-top: 1rem;
}

.task-input textarea {
    min-height: 80px;
    resize: vertical;
}

/* Ensure icons are centered in buttons */
button i {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
}

.mode-toggle {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 2rem;
}

.mode-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.8rem 1.5rem;
    border: none;
    border-radius: 12px;
    background-color: var(--text-secondary);
    color: white;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 1rem;
    font-weight: 600;
}

.mode-button i {
    font-size: 1.2rem;
}

.mode-button span {
    margin-left: 0.5rem;
}

.mode-button.active {
    background-color: var(--primary);
}

#work-mode.active {
    background-color: var(--primary);
}

#break-mode.active {
    background-color: var(--secondary);
}

.mode-button:hover {
    transform: translateY(-2px);
    filter: brightness(1.1);
}

/* Update the timer controls spacing */
.timer-controls {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1.5rem;
    margin: 2rem 0;
}

/* Ensure other circular buttons remain centered */
.controls button, 
#theme-toggle-btn, 
#increase-time, 
#decrease-time {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    border: none;
    background-color: var(--primary);
    color: white;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
}

.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    justify-content: center;
    align-items: center;
    padding: 1rem;
}

.modal.show {
    opacity: 1;
}

.modal-content {
    background-color: var(--surface);
    padding: 2rem;
    border-radius: 16px;
    width: 90%;
    max-width: 400px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
    margin: 0 1rem;
}

.modal-content h2 {
    margin-bottom: 1.5rem;
    color: var(--text);
    font-size: 1.5rem;
    text-align: left;
}

.modal-content textarea {
    margin: 1rem 0 1.5rem 0;
    padding: 1rem;
    width: 100%;
    box-sizing: border-box;
}

.modal-content textarea::placeholder {
    padding: 0;
    opacity: 0.7;
    color: var(--text-secondary);
    font-size: 0.95rem;
}

.modal-content button {
    background-color: #0037ff;
    color: white;
    border: none;
    padding: 0.8rem 1.5rem;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 600;
    font-size: 1rem;
    width: 100%;
    transition: background-color 0.2s ease;
}

.modal-content button:hover {
    background-color: #002ed4;
}

.current-focus {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    margin: 1rem 0;
    color: var(--text-secondary);
    font-size: 1.1rem;
}

.current-focus i {
    color: var(--primary);
}

.hidden {
    display: none;
}

/* Add these DOM elements to your existing elements section */
const focusModal = document.getElementById('focus-modal');
const focusInput = document.getElementById('focus-input');
const startFocusBtn = document.getElementById('start-focus');
const currentFocus = document.getElementById('current-focus');
const focusText = document.getElementById('focus-text');

/* Modify the startTimer function */
.start-timer {
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Add new focus handling functions */
function startFocusSession() {
    const focusDescription = focusInput.value.trim();
    if (focusDescription) {
        /* Save to task history */
        const task = {
            description: focusDescription,
            timestamp: new Date().toISOString(),
            mode: isWorkTime ? 'work' : 'break'
        };
        tasks.unshift(task);
        localStorage.setItem('tasks', JSON.stringify(tasks));
        
        /* Display current focus */
        focusText.textContent = focusDescription;
        currentFocus.classList.remove('hidden');
        
        /* Start the timer */
        focusModal.style.display = 'none';
        focusInput.value = '';
        
        /* Start the actual timer */
        timerId = setInterval(() => {
            timeLeft--;
            updateDisplay();
            
            if (timeLeft === 0) {
                alert(isWorkTime ? 'Work time is over! Take a break!' : 'Break is over! Back to work!');
                currentFocus.classList.add('hidden');
                if (isWorkTime) {
                    setBreakMode();
                } else {
                    setWorkMode();
                }
            }
        }, 1000);
        startButton.disabled = true;
        pauseButton.disabled = false;
        updateTaskList();
    }
}

/* Add event listeners */
startFocusBtn.addEventListener('click', startFocusSession);

function setWorkMode() {
    clearInterval(timerId);
    timerId = null;
    isWorkTime = true;
    timeLeft = WORK_TIME;
    workModeBtn.classList.add('active');
    breakModeBtn.classList.remove('active');
    startButton.disabled = false;
    currentFocus.classList.add('hidden');
    updateDisplay();
}

function setBreakMode() {
    clearInterval(timerId);
    timerId = null;
    isWorkTime = false;
    timeLeft = BREAK_TIME;
    breakModeBtn.classList.add('active');
    workModeBtn.classList.remove('active');
    startButton.disabled = false;
    currentFocus.classList.add('hidden');
    updateDisplay();
}

/* Add this to ensure proper box model for all elements */
* {
    box-sizing: border-box;
}

.banner {
    background-color: #0037ff;
    color: #FFFFFF;
    text-align: center;
    padding: 0.8rem 2rem;
    font-weight: 500;
    font-size: 1rem;
    letter-spacing: 0.5px;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    width: 100%;
    z-index: 999;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

/* Add responsive padding for mobile */
@media (max-width: 768px) {
    .timer-section {
        padding: 2rem 1.5rem;
    }
    
    .modal-content {
        padding: 1.5rem;
    }
}

/* Remove the old theme-toggle position styles */
.timer-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
}

.timer-header h1 {
    margin: 0;
    color: var(--text);
}

#theme-toggle-btn {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: none;
    background-color: var(--primary);
    color: white;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
}

#theme-toggle-btn:hover {
    transform: translateY(-2px);
    filter: brightness(1.1);
}

#theme-toggle-btn i {
    font-size: 1.2rem;
} 